package com.iot.equalitycheck;

public class Money {
	
	float amount;
	String currency;

	public Money(float amount, String currency)
	{
		this.amount = amount;
		this.currency = currency;
	}

	/*
	 * By default, every object has a hashcode which is generated by native JVM 
	 * but we can override it using custom implementation
	 * 
	 * if we override equals method, then we have to override hashcode method as well
	 *
	 * if 2 objects are equal then their hashcodes must be equal
	 * 
	 * if 2 objects hashcodes are equal then the 2 objects need not be equal
	 *
	 * hash collision: if 2 different objects share same hashcode
	 * 
	 * 
	 * Important: 
	 * 
	 * If we override equals method, then we should override hashcode method also when checking the equality of objects 
	 *
	 *ViceVersa: If we override hashcode method, then we should override equals method also when checking the equality of objects
	 *
	 */
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + Float.floatToIntBits(amount);
		result = prime * result + ((currency == null) ? 0 : currency.hashCode());
		return result;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Money other = (Money) obj;
		if (Float.floatToIntBits(amount) != Float.floatToIntBits(other.amount))
			return false;
		if (currency == null) {
			if (other.currency != null)
				return false;
		} else if (!currency.equals(other.currency))
			return false;
		return true;
		
	}
	
	/*
	 * @Override public boolean equals(Object obj) {
	 * 
	 * if (!(obj instanceof Money)) return false;
	 * 
	 * Money m = (Money)obj;
	 * 
	 * if(this.amount==m.amount && this.currency.equals(m.currency)) return true;
	 * 
	 * return false; }
	 */
	
	
}
