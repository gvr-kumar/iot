package com.iot.collections;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.iot.utils.Student;

public class HashMapItrMain {

	public static void main(String[] args) {
		
		Student std1 = new Student("Id001", "Alex", "Alpharetta Street");
		Student std2 = new Student("Id001", "Alex", "Alpharetta Street");
		Student std3 = new Student("Id002", "Peter", "Charlotte Lane");
		Student std4 = new Student("Id002", "Chris", "Chilvary Lane");
		
		
	  System.out.println(std1.hashCode()); 
	  System.out.println(std2.hashCode());
	  System.out.println(std3.hashCode()); 
	  System.out.println(std4.hashCode());
		 
			
		HashMapItr.AddEntity(std1);
		HashMapItr.AddEntity(std2);
		HashMapItr.AddEntity(std3);
		HashMapItr.AddEntity(std4);
	
		
		System.out.println("Retrieve entity: " + HashMapItr.RetrieveEntity("Id002"));
		
		HashMapItr.DisplAllKeys();
		
		Map<Student, Student> newMap = new HashMap<Student, Student>();
		
		newMap.put(std1, std1);
		newMap.put(std2, std2);
		newMap.put(std3, std3);
		newMap.put(std4, std4);
		
		/*
		 * By default, every object has a hashcode which is generated by native JVM 
		 * but we can override it using custom implementation
		 * 
		 * if we override equals method, then we have to override hashcode method as well
		 *
		 * if 2 objects are equal then their hashcodes must be equal
		 * 
		 * if 2 objects hashcodes are equal then the 2 objects need not be equal
		 *
		 * hash collision: if 2 different objects share same hashcode
		 * 
		 * 
		 * Important: 
		 * 
		 * If we override equals method, then we should override hashcode method also when checking the equality of objects 
		 *
		 *ViceVersa: If we override hashcode method, then we should override equals method also when checking the equality of objects
		 *
		 *On which ever instance variable we are calculating (or overriding hashcode)hashcode, 
		 *it should match with the hashmap key
		 *
		 */
		
		/*Case1: when hashcode and euqals methods are not overridden: Since the hashcodes are not equal, 
		 * all the objects even though they are same are added to the hashmap 
		 * 
		 * Case2:
		 * 
		 */
		
		/*
		 * System.out.println(newMap.size());
		 * 
		 * Iterator<Student> stdItr = newMap.keySet().iterator();
		 * 
		 * while(stdItr.hasNext()) { Student std = stdItr.next();
		 * System.out.println(std); }
		 * 
		 * System.out.println("------------------------------");
		 * System.out.println(newMap.get(std1));
		 */
		/*
		 * newMap.get(std2); newMap.get(std3); newMap.get(std4);
		 */
	}

}
