1)OOPS concepts (Encapsulation, Polymorphism, Inheritance, Abstraction)

2)Static, Access specifiers, getters & setters

3)Packages & Interfaces , Dynamic resolution

4)Exception Handling (when to use which exception), Wrapper class, POJO (Plain Old Java Object: A class which has only variables, constructors and getters & setters but no major business logic)

5) Autoboxing, unboxing, has-a & is-a relationship, HasA : Composition & Aggregation.

Immutable classes, Helper

6)Inheritance (super, this), Overriding, Overloading, Multithreaded Programming

7)Annotations; String Pool

8) what is JVM? Performance? Heap, stack, differences? out of memory errors.

9)Garbage collection

10) Java collections: implementation of utilities (collections); Concurrent modification exception. Comparable & Comparator
Hashcode and equals

Linked Hash map and linked hash set

facade

concurrent hash map

Cloning, Serializable (Serialization), Generics, Transient

11) Enumerations and Annotations (Metadata)

12) Generics and I/O

13) Event Handling

14) The Concurrency Utilities

15) Regular Expressions

16) Servlets

17) Design patterns with examples



Frameworks:

1) Spring and Springboot

2) Microservices design principles

3) No SQL Databases

4) Hibernate

5) Kafka (events)

6) Data Indexing and parsing (searching): Elastic search


7) MVC: Model View Controller


8) EAPIS?



MMisc: 

1) Formatting and plugins

2) Unit testing; Logs

3)Eclipse and other IDEs

4) Functional Programming

5) Checkins : GIT HUB 

6) OATH Implementation, JWT

7) HTTP Protocol

8) Serverless Architechture

9) Jenkins configuration and build files

10) Build process- build with maven

11)Integrate with UI and DB

12) UML diagrams 


/**

2-23-2021: String pool, Object Cloning

2021: Serialization, transient, 

2021: Enums & Generics & annotations

**/


Homeworks:

1) Books repo

2) CHanges to breadcrumb method- Done

3) immutable: origin class, rename b,c,d classes

4)serialization & de: multiple objects- Done

5) singleton Object with real time example and multiple objects with real time example


1)Maintain the repository of Books

2) Provide an utility to validate the existing books and add them to the repository

3) if the book is available, then add it always to the repository

4) checkin - check out of books should be the possibility

5) At any point of time, utility should give us the snapshot of the repository.


6) abandon the entity should be a possibility



7)book - name, author, price, dept, procured date, status

8) status : available / Checked out / Abandoned


snapshot : 

 the total books available : 4213423423

 The # of books checked out : 234234

 the number of books at DEPT1 : 234234 (Optional)

  the number of books at DEP2 : 234234 (Optional)