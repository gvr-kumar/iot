package com.iot.collections;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import com.iot.utils.Student;

public class HashMapItrMain {

	
	public static void main(String[] args) {
		
		String stdId = null;
		String stdName = null;
		String stdStreetName = null;
		
		for(int i = 1; i<=100; i++)
		{
			stdId = "StudentId";
			stdName = "Alex";
			stdStreetName = "Alpharetta Street";
			stdId = stdId + i; 
			stdName = stdName + i; 
			stdStreetName = stdStreetName + i; 
			Student stdObj = new Student(stdId, stdName, stdStreetName);
			HashMapItr.AddEntity(stdObj);
		}
		HashMapItr.displMapContnts();
	
		
		//HashMapItr.DisplAllKeys();
		
		//Map<Student, Student> newMap = new HashMap<Student, Student>();
		
		
		
		/*
		 * By default, every object has a hashcode which is generated by native JVM 
		 * but we can override it using custom implementation
		 * 
		 * if we override equals method, then we have to override hashcode method as well
		 *
		 * if 2 objects are equal then their hashcodes must be equal
		 * 
		 * if 2 objects hashcodes are equal then the 2 objects need not be equal
		 *
		 * hash collision: if 2 different objects share same hashcode
		 * 
		 * 
		 * Important: 
		 * 
		 * If we override equals method, then we should override hashcode method also when checking the equality of objects 
		 *
		 *ViceVersa: If we override hashcode method, then we should override equals method also when checking the equality of objects
		 *
		 *On which ever instance variable we are calculating (or overriding hashcode)hashcode, 
		 *it should match with the hashmap key
		 *
		 *On which ever instance variable we are overriding equals method, 
		 *the same instance variable should be used in the hashcode method.
		 */
		
		/*Case1: when hashcode and euqals methods are not overridden: Since the hashcodes are not equal, 
		 * all the objects even though they are same are added to the hashmap 
		 * 
		 * Case2:
		 * 
		 */
		
		/*
		 * System.out.println(newMap.size());
		 * 
		 * Iterator<Student> stdItr = newMap.keySet().iterator();
		 * 
		 * while(stdItr.hasNext()) { Student std = stdItr.next();
		 * System.out.println(std); }
		 * 
		 * System.out.println("------------------------------");
		 * System.out.println(newMap.get(std1));
		 */
		/*
		 * newMap.get(std2); newMap.get(std3); newMap.get(std4);
		 */
	}

}
